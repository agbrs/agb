{"code":"#![no_std]\n#![no_main]\n\nuse agb::{\n    display::{\n        affine::AffineMatrixBackground,\n        tiled::{AffineBackgroundSize, TiledMap},\n        Priority,\n    },\n    fixnum::{num, Num},\n    include_background_gfx,\n};\n\ninclude_background_gfx!(affine_tiles, \"3f3f74\", water_tiles => 256 \"examples/water_tiles.png\");\n\n#[agb::entry]\nfn main(mut gba: agb::Gba) -> ! {\n    let (gfx, mut vram) = gba.display.video.tiled1();\n    let vblank = agb::interrupt::VBlank::get();\n\n    let tileset = &affine_tiles::water_tiles.tiles;\n\n    vram.set_background_palettes(affine_tiles::PALETTES);\n\n    let mut bg = gfx.affine(Priority::P0, AffineBackgroundSize::Background32x32);\n\n    for y in 0..32u16 {\n        for x in 0..32u16 {\n            bg.set_tile(&mut vram, (x, y), tileset, 1);\n        }\n    }\n\n    bg.commit(&mut vram);\n    bg.set_visible(true);\n\n    let mut rotation = num!(0.);\n    let rotation_increase: Num<i32, 16> = num!(0.01);\n\n    let mut input = agb::input::ButtonController::new();\n\n    let mut scroll_x = 0;\n    let mut scroll_y = 0;\n\n    loop {\n        input.update();\n        scroll_x += input.x_tri() as i16;\n        scroll_y += input.y_tri() as i16;\n\n        let scroll_pos = (scroll_x, scroll_y);\n\n        rotation += rotation_increase;\n        rotation = rotation.rem_euclid(1.into());\n\n        let transformation = AffineMatrixBackground::from_scale_rotation_position(\n            (0, 0),\n            (1, 1),\n            rotation,\n            scroll_pos,\n        );\n\n        bg.set_transform(transformation);\n\n        vblank.wait_for_vblank();\n        bg.commit(&mut vram);\n    }\n}\n\n"}